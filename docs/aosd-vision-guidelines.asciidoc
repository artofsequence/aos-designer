= AOS Designer: Vision & Guidelines
A. Joel Lamotte <klaim@artofsequence.org>


**_WARNING: This document is a work in progress and will evolve a lot until it becomes definitely useful for the community to use. Also please discuss it on the developers mailing list if necessary._**


The purpose of this document is to be a reference for the community to understand the vision, objectives and design guidelines that the AOS Designer project should follow, allowing the contributors to follow the mindset in which this tool is built and provide useful contributions.


== AOS Designer: Objectives

AOS Designer is a mountage tool. It have practical and _demonstrative_ purposes.
The main **demonstrative** purpose is to show that useful tools can be built around https://github.com/artofsequence/aosl[AOSL], the language on which all the AOS toolset rely on. As most of AOS foundations, a company can build better tools and players over this technologies and is encouraged to do so.

The practical objectives of the project is to *unleash creators by allowing*:

 * **Digital story montage** by composing them with different kind of digital media.
 * Help produce digital stories **in an efficient way** for him/her.
 * Publish their work on an **undefined multitude of target platforms**.
 * Prototyping digital sequences, also known as **story-boarding**.

Those objectives should be described in more precision separately to better understand the global direction of the project.

But first, we need to remove ambiguities that often spawn in discussions about what is this tool.

== 0. What AOS Designer is not

To clarify what is AOS Designer, we must first define **what it is not**:
 * a drawing tool (although a basic way to draw inside AOSD is wanted for story-boarding, see Storyboarding section);
 * a video montage tool;
 * an graphic animation editor;
 * a **_{insert media format here}_** editor: it manipulate media by putting them together into a story, but is unable to generate modified media files (it cannot save an image file that have been resized in the editor for example);
 * a comics-specific tool: it's more generalist and it's capacities goes far beyond editing comics only;


== 1. Digital Stories Montage

The basic functionalities required for AOS Designer to have any kind of usefulness is to allow the user to do digital story montage. By montage, we mean the following categories of actions:

=== 1.1. Importing media in a sequence: 
Digital sequences are basically a set of media (graphics, audio & softwares) that are manipulated in varied ways through the interpretation of the story.
The user have to be able to add, remove and organize media that he/she will use inside a sequence, in a set of Libraries.

=== 1.2. Edit the Story:
By Story we mean the story-line generated by AOSL information. This story-line is generated from a graph of "changes" to create it on-the-fly, to allow branches and loops and much more (see AOSL documentation). 

Editing this graph is the most important functionality. She should be able to manipulate Objects states by specifying each Changes happening between each Stages in a very simple way. She should potentially be able to create branches and loops in her story, even if this isn't recommended and should be used with caution.

=== 1.3. Edit Objects in the Canvas:

An AOSL interpreter will read the Story graph of a sequence following a specific path, driven by the reader. At each stage of the story the Canvas will have a different state: the content of the sequence that is currently exposed to the reader (we say that the objects are "active"). 

It means that the author of the sequence needs to be able to see what the Canvas will look like at each stage of his Story, but also be able to simply follow different paths of the Story if there are branches or loops, see the differences easily and see the side effects of each modification in all different possible paths at the same time.

The user should also be able to manipulate objects in the canvas. Objects are modified instances of media imported in the Sequence, for example a sprite which shows a part of an image file. The author will manipulate objects states between each stage and this manipulation will generate Changes between stages.

=== 1.4. Edit the Sequence Properties:

The Canvas size and other global properties of the Sequence should be editable by the user, including meta-data about the Sequence (like the author name, email, etc.).

=== 1.5. Organize several Sequences in one Project:

Narratives can be diffused as "one shot" or as series. If a sequence have to be cut in several episodes, then those sequences could share properties, libraries of media and other data. We call "Project" is a grouping of several sequences in the same workspace. It exists only while editing the sequences and allow the author to have his work divided in separate sequences that are working together.

=== 1.6. Preview the result: 

It is important for the author to constantly be able to have **immediate feedback** when he is tweaking his creation. The canvas edition view should be instantly updated with changes, but as an editor view, it might not reflect exactly the result. An embedded player (maybe provided with an exporter, see 3.) should be available to the author as a separate view, showing exactly the end result and being immediately updated if the sequence is being modified.



Those functionalities are the foundations on which the tool can become *useful*.
However, this is not enough to make AOS Designer successfully achieve it's purpose.


== 2. Tool Efficiency

AOS Designer need to be as useful as the hardware allows for it's users.
It needs to be more useful than hacking with other tools that are note dedicated to edit digital sequences. 
It needs to be more useful than other tools trying to allow editing digital sequences but that have technical limitations or design limitations, handicapping the creativity of the authors.

To allow the creator to be as efficient as possible when editing digital sequences, AOS Designer needs to be efficient too.
In our context, efficiency implies the following features:

=== 2.1. Fast and responsive: 

As any editor tool should, speed in processing and responsivity are key. AOSD should react immediately to any input. Only the hardware limitations should give boundaries to the global performance of this editor. Both global and micro optimizations are welcome if they become necessary to remove any latency for the user.

=== 2.2. Simple Abstractions:

Abstractions (like a "window" being the interface with a program) are powerful if well chosen as they allow the user to almost instantly guess the purpose and use of things being represented. Unfortunately, it is very difficult to find powerful abstractions to describe new ways of thinking, like AOS does, making this point a really hard challenge.
AOSD should expose abstractions simple enough to allow an author to quickly figure the purpose of each tool, letting him express his creativity as soon as possible and with the less friction possible.

=== 2.3. Permissive and customizable:

The only constraint that the AOSL format impose to it's users is that whatever is described have to be organized as a sequence, generated by a directed graph of changes applied to a set of media (see AOSL documentation). The media can potentially be anything. The shape of the graph and the presence of loops and branches allow for complex structures only available on digital platforms, if the author really want to use them.

AOSD should reflect the flexibility of AOSL. It should never forbid the user to do something that AOSL does allow. 
Also, it should be customizable by the users. Users have to be able to make their workplace as efficient as possible for them by modifying it to match their mind set or hardware setup.


=== 2.4. Cross-Platform: 

AOSD should work equally at least on Windows, MacOSX and popular desktop-oriented Linux distributions, like Ubuntu. Creators are using all those platforms currently and even tablets are providing desktop environments now.

=== 2.5. Transportable: 

Creativity is at it's apex when constraints and isolated. A lot of creators work best in trains, planes or somewhere offline, in isolation. They should be able to have their whole workspace, including both projects and AOSD executables, ready on an external disk or a usb key, just plug it in any computer and start working.

=== 2.6. Stable: 

Major versions of AOSD have to have stability as a primary features. It means that versions adding new features should not be recommended but the next one stabilizing it should be encouraged. It also means that the development of AOSD should be focused on making the tool as stable as possible from the beginning. Bugs will be the main negative factor in the choice of even trying this tool so we have to provide an as-smooth-as-possible experience to the users.


== 3. Exporters

AOS Designer is a tool at one extreme side of the production chain. On the other side of this chain, there will be an interpreter that will just read and play the sequence that have been created using AOS Designer.
But depending on this interpreter's implementation and platform, the AOSL format might not be the best format, because it is meant to be used by tools in priority (using XML). For example, a custom binary format optimized for a specific smartphone player might be more efficient. Or maybe that player is embedded in a publication website, so a special format might be required to upload the sequence and automatically put it online.

Also, specific interpreters might require the creator to provide additional information required on the distribution platform. More important: some interpreters will need to constrain the creator in some ways to make sure his work will be possible to play in the target platform. For example, screen ratios might be forced for sequences targeting specific smartphones. Another example: most interpreter will not be able to play any video format, so the creator should be aware of what kind of format he can use.

To complete the chain of production, an intermediate tool might be needed: an **exporter**.

Exporters are applications that take AOSL data as input and convert to another format, more useful for a specific target or a set of targets. For example, the very first simplest exporter that will be provided with AOS Designer will simply create a folder containing a web page that would present the sequence in a simple player. The conversion here will be AOSL => HTML page. Another exporter that is planned will simply embedd the AOSL file and it's resources in a ZIP. Another exporter could export to epub format. Another one to a format optimized for a tablet player. 

To AOS Designer, exporters are the ambassadors of interpreters (or publication platforms). They should provide information about these specific target interpreters to allow AOS Designer to prevent the author from the limitations and expose special features of the targets he want to enable for his sequence. They also allow potential optimizations of output format where AOS Designer continues to focus on making the author productive and playful. They should inform AOS Designer which media formats they can accept, and which they cannot.

AOS Designer need to work with exporters, by following these principles:

=== 3.1. Allow the author to choose one or more specific target players, or none, for his sequence (or project).

By default, sequences built in AOS Designer will just use the "standard" AOSL, without any other constraints.
However, the author should be allowed to specify to AOS Designer that he wants the sequence to be focused on a specific target player, or a set of targets players. Then, AOSD will have to work use exporters to help both the author be productive for this target and provide the sequence produced by the author to the exporters. 

=== 3.2. Interfacing with exporters:

A set of ways to communicate with exporter applications will be available. Exporters have to be separate applications to ensure that they might be used in a more complex or totally different context than working with AOSD. At the time I am writing this document, the plan is to use command-line properties to communicate with the exporter, for providing sequences to convert and for getting information from it.
Another alternative would be for the exporter to generate files to be read by AOSD. Whatever the way it is implemented, AOSD have to communicate with exporters in a generic way.

=== 3.3. Use exporters' constraints, requirements and extensions:

The most important information exporters have to provide are:

 * **constraints**: limitations of the target interpreter, like canvas (screen) ratio, media formats it can handle, etc.
 * **requirements**: information that the author should provide for that target player to work correctly, if needed by the player or a related publication platform.
 * **extensions**: The author should be notified that targeting a specific player will allow him to use some  special extensions. Extensions are interpreter-specific AOSL extensions that the exporter (and the interpreter) will be able to understand. Extensions often require specific information that should be asked to the author when he use them. 
 
The author should be exposed to those information as early as possible in the production process. Once AOSD feed the exporter with the sequences, the exporter should also check for errors like missing information, use of not handled formats or unknown extensions, but this should be checked first by AOSD using exporter's information.

=== 3.4. Capability-relative Variations:

An AOSL sequence (> v1.0) should be able to represent the same story with variations depending on the capabilities of the interpreter. For example, some images could be used instead of other images depending on the country of the reader, or if he is color-blind or not.

AOSD should provide a way to allow the creator to specify different Changes or Object instances depending on the capabilities of the interpreter, if that interpreter is not completely known (for example the web interpreter).

=== 3.5. Preview Interpreters: 

This is not a requirement but an important extension to the idea of exporters. Some exporters with really specific target player features, maybe providing a set of AOSL extensions for example, should provide to AOSD a way to preview the result of using those features. It could be by extending the default preview provided with AOSD. It could be by providing another preview implementation, maybe based on the player's code.
The goal is to continue having the author to be able to see immediately the impact of any changes, as stated in 1.6.

== 4. Story-boarding

The previous points are requirements to allow the user to be both productive and creative. However, there is a missing step to achieve complete, playful, creativity: prototyping. Or, for visual narratives specifics, story-boarding.

Most of the time, when someone wants to create a story, he will go with high concepts first, broad lines of narration and un-detailed strokes of his idea. The result will be the sketch skeleton of the future work to come.

If the user just want to start organizing his story without thinking about how it will look like in the end, like story-boarding a comics (or make a "na-mé", for manga authors), then she should have ways to create some placeholder resources to fill the story with.

AOSD need to allow the following:

=== 4.1. Abstract representations of any Object:

Objects are the elements "active" in the canvas, visually (visible/hidden) or as audio output (playing/not-playing), or both. The author should be allowed to create objects without having to import media resources first. She will then obtain abstract representations of those objects and will be able to work with them. Once done, she should make sure that every object is associated with a media resource, otherwise the sequence will not be exportable.

=== 4.2. Simple Drawing Tool:

An important feature to have in AOSD would be to allow editing images using a really simple graphic edition tool (think "paint"). Not a full graphic edition tool, but just a way for the author to quickly sketch pictures that will be the basis for a new sequence, and might (or not) be replaced later by more polished pictures. This feature is a bit subtle to implement and might overlap with the following.

=== 4.3. Media editor tools integration:

Basically, an author should be able to edit media resources in their editors of choice (like Adobe Photoshop to edit bitmaps for example) and that resource should be instantly updated in the sequence (if AOS Designer is kept open in the same time). The purpose would be for the author to keep getting immediate feedback of his changes even when the changes occurs in an external editor that generate resources impacting the sequence.

Also, AOSD should be able to open the associated edition tool for media resources, on user demand.
